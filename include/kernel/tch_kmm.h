/*
 * tch_palloc.h
 *
 *  Created on: 2015. 3. 21.
 *      Author: innocentevil
 */

#ifndef TCH_PALLOC_H_
#define TCH_PALLOC_H_


/*
 * tch_kmem.h
 *
 *  Created on: 2015. 3. 18.
 *      Author: innocentevil
 */

/**\brief Tachyos kernel has multiple layer of dynamic memory support. when new process is created, kernel has to prepare a dedicated memory space where
 *        process runs(executes) and puts(load / store) its resource used in run time. typically kernel which is built with its application into single image
 *        rarely cares about runtime stability and security issues generated by malicious behavior of any program. because they are all fixed in build time.
 *        But if kernel which is to support dynamic program loading has to concern those issues seriously. fortunately many modern Microcontrollers support hardware level
 *        system protection features(like momory protection unit) which provides more trasnparency of program behavior and brings high degree of stability to system.
 *        this module is to deal with both dynamic memory allocation to process(program) and memory access control in layered fashion.
 *
 *        Page is fixed size memory unit which can be applied with different access permission. its size must be power of two for hardware dependency.
 *
 *
 * \addtogroup kernel
 *
 */

#if defined(__cplusplus)
extern "C" {
#endif


///@{
typedef enum {									//  Unprivilidged mode            |      Privilidged mode
	TCH_PAGE_ACCESSIBILITY_SHARED,				//  (R)ead / (W)rite              |        R / W
	TCH_PAGE_ACCESSIBILITY_SHARED_PROTECTED,	//     R                          |        R / W
	TCH_PAGE_ACCESSIBILITY_PRIVATE,				//     R / W (ower process)       |        R / W
	TCH_PAGE_ACCESSIBILITY_KERNEL,				//     N / A                      |        R / W
}tch_pageAccessibility;


/**Kernel Mode Interface (should be invoked only from kernel mode (privilidged mode)*/
/**
 * \brief initialize page allocator for Tachyos Kernel
 *
 */
extern tchStatus tchk_pageInit(void* kmem_base,uint32_t msz);
extern tchStatus tchk_shareableMemInit(uint32_t msz);
extern tchStatus tchk_kernelHeapInit(uint32_t msz);

/**
 *
 */
extern tch_pageId tchk_pageRequest(tch_thread_kheader* owner,uint32_t psz,tch_pageAccessibility pacc);
extern void tchk_pageRelease(tch_pageId pgId);
extern tchStatus tchk_mapPage(tch_pageId pgId);
extern tchStatus tchk_unmapPage(tch_pageId pgId);
extern void* tchk_getPageAddress(tch_pageId pgId);
extern size_t tchk_getPageSize(tch_pageId pgId);



extern void* tchk_kernelHeapAlloc(size_t sz);
extern void tchk_kernelHeapFree(void* km_chnk);
extern uint32_t tchk_kernelHeapAvail();
extern tchStatus tchk_kernelHeapFreeAll();

/**
 *
 */
extern void* tchk_shareableMemAlloc(size_t sz,BOOL prot);
extern void tchk_shareableMemFree(void* mem);
extern uint32_t tchk_shareableMemAvail(BOOL prot);
extern tchStatus tchk_shareableMemFreeAll(tch_thread_kheader* owner);


extern tchStatus tchk_userMemInit(tch_thread_kheader* owner,tch_userMemDef_t* mem_def,BOOL isroot);
extern tchStatus tchk_userMemFreeAll(tch_thread_kheader* owner);

extern void* tch_shMemAlloc(size_t sz,BOOL prot);
extern void tch_shMemFree(void* mchunk);
extern uint32_t tch_shMemAvali(BOOL prot);



#if defined(__cplusplus)
}
#endif

#endif /* TCH_PALLOC_H_ */
