{
  "name": "Tachyos",
  "tagline": "Embedded OS for IoT",
  "body": "# TachyOS \r\n[![Build Status](https://travis-ci.org/fritzprix/TachyOS.svg?branch=master)](https://travis-ci.org/fritzprix/TachyOS)\r\n\r\n## Note \r\n> This project is subjected to serious HOMEBREWING and still in INFANCY. So any experimental change can be made without any notice.  \r\n\r\n## About\r\n> TachyOS is the RTOS based on microkernel architecture which includes only minimal components like thread / synchronization, memory management, inter-thread communication while supporting execution context / address space isolation(protection) and extensible modular interface. Name of this project comes from the hypothetical particle called 'tachyon' [t챈ki.�뭤], whose speed increases as its energy decreases theoretically, is thought to be the ideal of the real time application which runs in very constrained environment. \r\n\r\n## Motivation   \r\n+ Build modular architecture which supports both static linked(kernel mode) and dynamic-linked module(user mode).\r\n+ Provides dynamic loading and dependency management of an application through network.\r\n+ Provides secure runtime environment and fault isolation for user application using memory protection facility which is generally available in low-cost hardware.\r\n\r\n## Features\r\n + provide runtime scalablility with various dynamic modules. (Not Supported Yet)\r\n + Provides application loading and debugging over the network. (Not Supported Yet)\r\n + Provides autonomous dependency (dynamic module) management over the network. (Not Supported Yet)\r\n + Support multi-threading \r\n    + The number of threads is limited only by available memory\r\n    + Context-switch overhead is less than 5us in ARM CM4 (STM)\r\n + Preemptive scheduler with 6 execution priorities  \r\n + Various lightweight synchronization \r\n    + Monitor (mutex / condition variable)\r\n    + Event (blocking pub / sub)  \r\n    + Semaphore  \r\n    + Barrier\r\n + Various Inter-thread communication \r\n    + Message Queue  \r\n    + Mail Queue  \r\n+ HAL (as static module) [UART / I2C / SPI / TIMER / RTC / GPIO]  \r\n\r\n## Target Supported  \r\n + STM32F40x (ARM Cortex-M4)   \r\n + STM32F41x (ARM Cortex-M4)   \r\n + STM32F20x (ARM Cortex-M3)    \r\n\r\n## Build Environment   \r\n project is developed with eclipse IDE with ARM Cross compile tool (toolchain and plugin)\r\n + arm gcc cross compiler     \r\n   link : [GCC ARM Embedded in Launchpad] (https://launchpad.net/gcc-arm-embedded)   \r\n\r\n> $> sudo add-apt-repository ppa:team-gcc-arm-embedded/ppa  \r\n> $> sudo apt-get update   \r\n> $> sudo apt-get install gcc-arm-embedded        \r\n    \r\n+ python2.7 & pip for configuration utility (jconfigpy)    \r\n\r\n> $> sudo apt-get install python-dev python-pip  \r\n\r\n+ gnu arm eclipse plug-in   (optional)    \r\n   link : [GNU ARM Eclipse Plug-ins ] (http://gnuarmeclipse.livius.net/blog/)       \r\n    \r\n+ For Windows user, MinGW or Cygwin should be installed (might be included in GCC ARM toolchain installation)         \r\n\r\n## Build in Ubuntu\r\n    1. get source code from repository\r\n    $> git clone https://github.com/fritzprix/TachyOS.git\r\n    $> cd TachyOS\r\n    \r\n    2. initiate project configuration and make your own configuration\r\n    $> make config\r\n    \r\n    or you can use predefined configuration\r\n    $> make config ARCH=ARM DEFCONF=stm32f4_def.conf\r\n    \r\n    3. build project\r\n    $> make all\r\n    \r\n    4. (Optional) if you want reconfigure project\r\n    $> make config_clean\r\n    ... and go to 2\r\n\r\n## To-Do\r\n + Add SDIO HAL Implementation (~Apr.2016)\r\n + Add virtual file system   (~May.2016)\r\n \r\n## License \r\n LGPL V3.0 \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}